function yourCode(w, h, mapArr, x1, y1, x2, y2) {
	// 배열을 초기화
	var resArr  = [];

	// 이동 비용 배열을 초기화
	var arr = [];
	for (var i = 0; i < w * h; i ++) {arr[i] = Infinity;}

	// 이동 비용을 계산
	var stck = [];
	stck.unshift({x: x2, y: y2, cst: - mapArr[x2 + y2 * w]});
	while (stck.length) {
		var p = stck.shift();
		var x = p.x;
		var y = p.y;
		var cst = p.cst + mapArr[x + y * w];
		if (cst >= arr[x + y * w]) continue;
		arr[x + y * w] = cst;

		if (x > 0) stck.unshift({x: x - 1, y: y, cst: cst});
		if (y > 0) stck.unshift({x: x, y: y - 1, cst: cst});
		if (x < w - 1) stck.unshift({x: x + 1, y: y, cst: cst});
		if (y < h - 1) stck.unshift({x: x, y: y + 1, cst: cst});
	}

	// 디버그용 출력
	for (var y = 0; y < h; y ++) {
		var s = "";
		for (var x = 0; x < w; x ++) {
			var c = arr[x + y * w];
			s += (c < 10 ? " " + c : c) + ", ";
		}
		console.log(s)
	}

	// 종료점에서 시작점으로 이동
	var x = x1;
	var y = y1;
	var cst = arr[x, y];
	while (cst) {
		resArr.push(x, y);

		var newCst = Infinity, tmp;
		var newX, newY;

		if (x > 0
		 && (tmp = arr[(x - 1) + y * w]) < cst) {
			newCst = tmp; newX = x - 1; newY = y;
		}
		if (y > 0
		 && (tmp = arr[x + (y - 1) * w]) < cst) {
			newCst = tmp; newX = x; newY = y - 1;
		}
		if (x < w - 1
		 && (tmp = arr[(x + 1) + y * w]) < cst) {
			newCst = tmp; newX = x + 1; newY = y;
		}
		if (y < h - 1
		 && (tmp = arr[x + (y + 1) * w]) < cst) {
			newCst = tmp; newX = x; newY = y + 1;
		}
		cst = newCst;
		x = newX;
		y = newY;
	}
	resArr.push(x2, y2);

	// 결과를 담은 배열을 되돌리며 처리 종료
	return resArr;
}
